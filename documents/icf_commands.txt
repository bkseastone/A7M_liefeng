（1）define [ exported ] symbol name = expr;
作用：指定某个符号的值。
参数：

exported 导出该symbol，使其对可执行镜像可用
name 符号名
expr 符号值
举例：
define symbol RAM_START_ADDRESS = 0x40000000;  /*  定义 RAM 起始地址  */ 
define symbol RAM_END_ADDRESS  = 0x4000FFFF;  /*  定义 RAM 结束地址  */
-------------------------------------------------------------------
（2）define memory name with size = expr [, unit-size];
作用：
定义一个可编址的存储地址空间（memory）。
参数：
name memory的名称
expr 地址空间的大小
unit-size expr的单位，可以是位（unitbitsize），缺省是字节（unitbytesize）
举例：
define memory MEM with size = 4G;
-----------------------------------------------------------------
（3）define region name = region-expr;
作用：
定义一个存储地址区域（region）。一个区域可由一个或多个范围组成，每个范围内地址必须连续，但几个范围之间不必是连续的。
参数：
name region的名称
region-expr memory:[from expr { to expr | size expr}]，可以定义起止范围，也可以定义起始地址和region的大小
举例：
define region ROM = MEM:[from 0x0 size 0x10000]; 
    /* 定义 ROM region，位于地址空间MEM 中，起始地址为0x0，大小为0x10000 字节  */ 
define region ROM = MEM:[from 0x0 to 0xFFFF]; 
    /* 定义 ROM region，位于地址空间MEM 中，起始地址为0x0，结束地址为0xFFFF */
---------------------------------------------------------------------------------------------
（4）
define block name [ with param, param... ] 
{ 
extended-selectors 
}; 
作用：     定义一个地址块（block）；它可以是个只保留指定大小的地址空间的空块，比如栈、堆；也可以包含一系列的sections，由extended-selectors 选择。 
参数： 
name     block 的名称 
param   可以是：        size = expr       （块的大小） 
                   maximum size = expr （块大小的上限） 
                   alignment = expr   （最小对齐字节数） 
                   fixed order        （按照固定顺序放置sections） 
extended-selector  [ first | last ] { section-selector | block name | overlay name } 
first           最先存放 
last            最后存放 
section-selector [ section-attribute ][ section sectionname ][object filename ] 
section-attribute [ readonly [ code | data ] | readwrite [ code | data ] | zeroinit ] 
sectionname      section的名称 
filename         目标文件的名称 
name            block或overlay的名称 
注：这里可以按照section的属性，名称及其所在目标文件这三个过滤条件中，任意选取一个条件或多个条件进行组合，来圈定所要求的sections。 
举例： 
define block HEAP with size = 0x1000, alignment = 4 { }; 
    /* 定义 HEAP block，大小为0x1000，4 字节对齐，没有内容  */ 
define block MYBLOCK1 = { section mysection1, section mysection2, readwrite }; 
     /* 定义 MYBLOCK1 block，含有mysection1，mysection2，以及所有readwrite 属性的sections */ 
define block MYBLOCK2 = { readwrite object myfile2.o }; 
    /* 定义 MYBLOCK2 block，含有目标文件myfile2.o 中所有readwrite 属性的sections */ 
define block MYBLOCK3 = { readonly code object myfile3.o }; 
    /* 定义 MYBLOCK3 block，含有目标文件myfile3.o 中所有readonly 属性的code sections */ 
（5）
initialize { by copy | manually } [ with param, param... ] 
{ 
section-selectors 
}; 
作用：              初始化sections 
参数： 
by copy          在程序启动时自动执行初始化 
manually         在程序启动时不自动执行初始化 
param            可以是：         packing = { none | compress1 | compress2 | auto } copy routine = functionname 
                 packing表示是否压缩数据，缺省是auto 
                 functionname表示是否使用自己的拷贝函数来取代缺省的拷贝函数 
section-selector 同上 
举例： 
initialize by copy { readwrite };  /*  在启动时初始化所有属性为 readwrite 的sections */ 
--------------------------------------------------------------

（6）

do not initialize 
{ 
section-selectors 
}; 
作用：               规定在程序启动时不需要初始化的sections；一般用于__no_init 声明的变量段（.noinit） 
参数： 
section-selector  同上 
举例： 
do not initialize { .noinit };  /*  在启动时不要初始化.noinit section */ 
（7）
place at { address memory [:expr] | start of region_expr | end of region_expr } 
{ 
extended-selectors 
}; 
作用：                   把section 或 block 放置在某个具体的起始地址处，或者一个 region 的开始或结束处 
参数： 
memory                memory 的名称 
expr                  地址值，该地址必须在 memory 所定义的范围内 
region_expr           region 的名称 
extended-selector      同上 
举例： 
place at end of ROM { section .checksum };                /*  把.checksum 放在 ROM region 的最后  */ 
place at address MEM:0x0 { section .intvec };             /*  把.intvec 放在地址 0x0 */ 
place at address MEM:0x1000 { section .text object myfile.o };  /* the .text section of myfile.o */ 
place at address MEM:0x1000 { readonly object myfile.o };      /* all read-only sections of myfile.o */ 
place at address MEM:0x1000 { readonly data object myfile.o }; /* all read-only data sections of myfile.o */ 
（8）
place in region-expr 
{ 
extended-selectors 
}; 
作用：                   把section 或 block  （按任意顺序）放置在某个region 中 
参数： 
region-expr           region 的名称 
extended-selector      同上 
举例： 
place in ROM { readonly };               /* all readonly sections */ 
place in RAM { readwrite };              /* all readwrite sections */ 
place in RAM { block HEAP, block CSTACK, block IRQ_STACK };  /* heap and stacks */ 
place in ROM { section .text object myfile.o }; /* the .text section of myfile.o */ 
place in ROM { readonly object myfile.o }; /* all read-only sections of myfile.o */ 
place in ROM { readonly data object myfile.o }; /* all read-only data sections myfile.o */ 